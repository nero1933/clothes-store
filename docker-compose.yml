services:

  ui:
    container_name: ui
    build:
      context: ./ui
    ports:
      - "3000:3000"
    volumes:
      - ./ui:/ui
      - /ui/node_modules
    environment:
      - VITE_APP_BACKEND_ADDRESS=http://localhost:8000/api/v1
#    stdin_open: true
#    tty: true
#    command: npm start
    depends_on:
      - app
    networks:
      - mynetwork

  app:
    container_name: app
    build:
      context: ./app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py migrate django_celery_beat &&
             python manage.py runserver 0.0.0.0:8000"
#             python manage.py spectacular --file schema.yml &&
#             coverage run --source='.' manage.py test ecommerce &&
#             coverage html &&
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app
      - ./data/web:/vol/web
    environment:
      - DEBUG=${DEBUG}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_DEVICE_NAME=${STRIPE_DEVICE_NAME}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - USER_CONFIRMATION_KEY=${USER_CONFIRMATION_KEY}
      - PASSWORD_RESET_KEY=${PASSWORD_RESET_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mynetwork

  db:
    container_name: db
    image: postgres:16.2-alpine
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${DB_USER} -d ${DB_NAME}'" ]
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - mynetwork

  redis:
    container_name: redis
    image: redis:7.4.2-alpine
    hostname: redis
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - mynetwork

  stripe-cli:
    container_name: stripe-cli
    image: stripe/stripe-cli
    environment:
        - STRIPE_API_KEY=${STRIPE_SECRET_KEY}
        - STRIPE_DEVICE_NAME=${STRIPE_DEVICE_NAME}
#        - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    command: listen --forward-to 0.0.0.0:8000/api/v1/stripe_webhook/
    networks:
      - mynetwork

  celery-worker:
    container_name: celery-worker
    build:
      context: ./app
    hostname: celery-worker
    entrypoint: celery
    command: -A app worker --loglevel=INFO
    volumes:
      - ./app:/app
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
#    links:
#      - redis
#      - db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_started
    networks:
      - mynetwork

  celery-beat:
    container_name: celery-beat
    build:
      context: ./app
    hostname: celery-beat
    entrypoint: celery
    command: -A app beat --loglevel=INFO
    volumes:
      - ./app:/app
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
#    links:
#      - redis
#      - db
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      app:
        condition: service_started
    networks:
      - mynetwork

  flower:
    container_name: flower
    build:
      context: ./app
    hostname: flower
    entrypoint: celery
    command: -A app flower --loglevel=INFO
    ports:
      - "5555:5555"
    volumes:
      - ./app:/app
    environment:
      - DEBUG=${DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
#    links:
#      - redis
#      - celery-worker
#      - celery-beat
    depends_on:
      celery-worker:
        condition: service_started
      celery-beat:
        condition: service_started
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge