name: build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  run-tests:

    runs-on: ubuntu-latest

    env:

      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
      POSTGRES_DB: ${{ secrets.DB_NAME }}
      POSTGRES_USER: ${{ secrets.DB_USER }}
      POSTGRES_PASSWORD: ${{ secrets.DB_PASS }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ secrets.DEBUG }}
      DB_HOST: db
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASS: ${{ secrets.DB_PASS }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
      DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
      USER_CONFIRMATION_KEY_TEMPLATE: ${{ secrets.USER_CONFIRMATION_KEY_TEMPLATE }}
      USER_CONFIRMATION_KEY_TIMEOUT: ${{ secrets.USER_CONFIRMATION_KEY_TIMEOUT }}
      USER_CONFIRMATION_COUNTER_TEMPLATE: ${{ secrets.USER_CONFIRMATION_COUNTER_TEMPLATE }}
      USER_CONFIRMATION_COUNTER_TIMEOUT: ${{ secrets.USER_CONFIRMATION_COUNTER_TIMEOUT }}
      USER_CONFIRMATION_MAX_ATTEMPTS: ${{ secrets.USER_CONFIRMATION_MAX_ATTEMPTS }}
      RESET_PASSWORD_KEY_TEMPLATE: ${{ secrets.RESET_PASSWORD_KEY_TEMPLATE }}
      RESET_PASSWORD_KEY_TIMEOUT: ${{ secrets.RESET_PASSWORD_KEY_TIMEOUT }}
      RESET_PASSWORD_COUNTER_TEMPLATE: ${{ secrets.RESET_PASSWORD_COUNTER_TEMPLATE }}
      RESET_PASSWORD_COUNTER_TIMEOUT: ${{ secrets.RESET_PASSWORD_COUNTER_TIMEOUT }}
      RESET_PASSWORD_MAX_ATTEMPTS: ${{ secrets.RESET_PASSWORD_MAX_ATTEMPTS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker images
        run: docker compose build

      - name: Make Migrations & Migrate
        run: |
          chmod -R a+w ./app
          docker compose run --rm app sh -c "python manage.py makemigrations ecommerce"
          docker compose run --rm app sh -c "python manage.py migrate"

#      - name: Run tests
#        run: docker compose run --rm app sh -c "python manage.py test"

      - name: Run tests with coverage
        run: |
          docker compose run --rm app coverage run manage.py test
          docker compose run --rm app coverage xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml

#